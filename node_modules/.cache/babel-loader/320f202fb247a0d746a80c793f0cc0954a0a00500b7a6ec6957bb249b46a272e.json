{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  tasks: [],\n  isLoading: false,\n  error: null\n};\n// null\n// undefined\n\n// null - може написати або повернути вам тільки інший розробник\n// undefined - js не знайшов операнд з яким він амє працювати\nconst taskSlice = createSlice({\n  name: \"tasks\",\n  initialState,\n  // reducers: {\n  //   // Виконуватись в момент старту запиту\n  //   fetchingTasks(state) {\n  //     state.isLoading = true;\n  //   },\n  //   //  Виконуватись в момент успіху запиту\n  //   fetchingSuccess(state, { payload }) {\n  //     state.isLoading = false;\n  //     state.error = null;\n  //     state.tasks = payload;\n  //   },\n  //   //  Виконуватись в момент помилки запиту\n  //   fetchingError(state, action) {\n  //     state.isLoading = false;\n  //     state.error = action.payload;\n  //   },\n  // },\n  extraReducers: builder => {\n    builder.addCase(\"tasks/fetchAll/pending\", (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(\"tasks/fetchAll/fulfilled\", (state, {\n      payload\n    }) => {\n      // payload - змістовне навантаження твого екшену\n      console.log(payload);\n      state.isLoading = false;\n      state.error = null;\n      state.tasks = payload;\n    });\n    builder.addCase(\"tasks/fetchAll/rejected\", (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n    builder.addCase(\"tasks/delete/pending\", (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(\"tasks/delete/fulfilled\", (state, action) => {\n      state.isLoading = false;\n      state.error = null;\n      state.tasks = state.tasks.filter(item => item.id !== action.payload.id);\n    });\n    builder.addCase(\"tasks/delete/rejected\", (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n  }\n});\n\n// export const { fetchingTasks, fetchingSuccess, fetchingError } =\n//   taskSlice.actions;\n\nexport const taskReducer = taskSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","tasks","isLoading","error","taskSlice","name","extraReducers","builder","addCase","state","action","payload","console","log","filter","item","id","taskReducer","reducer"],"sources":["/Users/artemfaust/dev/reactlessons/src/redux/tasks/tasksSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = { tasks: [], isLoading: false, error: null };\n// null\n// undefined\n\n// null - може написати або повернути вам тільки інший розробник\n// undefined - js не знайшов операнд з яким він амє працювати\nconst taskSlice = createSlice({\n  name: \"tasks\",\n  initialState,\n  // reducers: {\n  //   // Виконуватись в момент старту запиту\n  //   fetchingTasks(state) {\n  //     state.isLoading = true;\n  //   },\n  //   //  Виконуватись в момент успіху запиту\n  //   fetchingSuccess(state, { payload }) {\n  //     state.isLoading = false;\n  //     state.error = null;\n  //     state.tasks = payload;\n  //   },\n  //   //  Виконуватись в момент помилки запиту\n  //   fetchingError(state, action) {\n  //     state.isLoading = false;\n  //     state.error = action.payload;\n  //   },\n  // },\n  extraReducers: (builder) => {\n    builder.addCase(\"tasks/fetchAll/pending\", (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(\"tasks/fetchAll/fulfilled\", (state, { payload }) => {\n      // payload - змістовне навантаження твого екшену\n      console.log(payload);\n      state.isLoading = false;\n      state.error = null;\n      state.tasks = payload;\n    });\n    builder.addCase(\"tasks/fetchAll/rejected\", (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n    builder.addCase(\"tasks/delete/pending\", (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(\"tasks/delete/fulfilled\", (state, action) => {\n      state.isLoading = false;\n      state.error = null;\n      state.tasks = state.tasks.filter((item) => item.id !== action.payload.id);\n    });\n    builder.addCase(\"tasks/delete/rejected\", (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n  },\n});\n\n// export const { fetchingTasks, fetchingSuccess, fetchingError } =\n//   taskSlice.actions;\n\nexport const taskReducer = taskSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EAAEC,KAAK,EAAE,EAAE;EAAEC,SAAS,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAK,CAAC;AACjE;AACA;;AAEA;AACA;AACA,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAC5BM,IAAI,EAAE,OAAO;EACbL,YAAY;EACZ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAM,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAAC,wBAAwB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3DD,KAAK,CAACP,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFK,OAAO,CAACC,OAAO,CAAC,0BAA0B,EAAE,CAACC,KAAK,EAAE;MAAEE;IAAQ,CAAC,KAAK;MAClE;MACAC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;MACpBF,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,KAAK,GAAG,IAAI;MAClBM,KAAK,CAACR,KAAK,GAAGU,OAAO;IACvB,CAAC,CAAC;IACFJ,OAAO,CAACC,OAAO,CAAC,yBAAyB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5DD,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;IACFJ,OAAO,CAACC,OAAO,CAAC,sBAAsB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACzDD,KAAK,CAACP,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFK,OAAO,CAACC,OAAO,CAAC,wBAAwB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3DD,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,KAAK,GAAG,IAAI;MAClBM,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACa,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACC,OAAO,CAACK,EAAE,CAAC;IAC3E,CAAC,CAAC;IACFT,OAAO,CAACC,OAAO,CAAC,uBAAuB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1DD,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA;;AAEA,OAAO,MAAMM,WAAW,GAAGb,SAAS,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}